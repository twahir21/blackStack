"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cookie = void 0;
const elysia_1 = require("elysia");
const cookie_1 = require("cookie");
const cookie_signature_1 = require("cookie-signature");
const cookie = (options = {}) => {
    const { signed, secret: secretKey, ...defaultOptions } = options;
    const secret = !secretKey
        ? undefined
        : typeof secretKey === 'string'
            ? secretKey
            : secretKey[0];
    const isStringKey = typeof secret === 'string';
    return new elysia_1.Elysia({
        name: '@elysiajs/cookie',
        seed: options
    })
        .decorate('unsignCookie', ((value) => {
        if (!secret)
            throw new Error('No secret is provided to cookie plugin');
        let unsigned = isStringKey
            ? (0, cookie_signature_1.unsign)(value, secret)
            : false;
        if (isStringKey === false)
            for (let i = 0; i < secret.length; i++) {
                const temp = (0, cookie_signature_1.unsign)(value, secret[i]);
                if (temp) {
                    unsigned = temp;
                    break;
                }
            }
        return {
            valid: unsigned !== false,
            value: unsigned || undefined
        };
    }))
        .derive((context) => {
        let _cookie;
        const getCookie = () => {
            if (_cookie)
                return _cookie;
            try {
                const headerCookie = context.request.headers.get('cookie');
                _cookie = headerCookie ? (0, cookie_1.parse)(headerCookie) : {};
            }
            catch (error) {
                _cookie = {};
            }
            return _cookie;
        };
        return {
            get cookie() {
                return getCookie();
            },
            setCookie(name, value, { signed = false, ...options } = {}) {
                if (signed) {
                    if (!secret)
                        throw new Error('No secret is provided to cookie plugin');
                    value = (0, cookie_signature_1.sign)(value, secret);
                }
                if (!Array.isArray(context.set.headers['Set-Cookie']))
                    context.set.headers['Set-Cookie'] = [];
                context.set.headers['Set-Cookie'].push((0, cookie_1.serialize)(name, value, {
                    path: '/',
                    ...defaultOptions,
                    ...options
                }));
                if (!_cookie)
                    getCookie();
                _cookie[name] = value;
            },
            removeCookie(name) {
                if (!getCookie()[name])
                    return;
                context.set.headers['Set-Cookie'] = (0, cookie_1.serialize)(name, '', {
                    expires: new Date('Thu, Jan 01 1970 00:00:00 UTC')
                });
                delete _cookie[name];
            }
        };
    });
};
exports.cookie = cookie;
exports.default = exports.cookie;
