"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  Patterns: () => Patterns,
  cron: () => cron,
  default: () => index_default
});
module.exports = __toCommonJS(index_exports);
var import_croner = require("croner");

// src/schedule.ts
var Days = /* @__PURE__ */ ((Days2) => {
  Days2[Days2["SUNDAY"] = 0] = "SUNDAY";
  Days2[Days2["MONDAY"] = 1] = "MONDAY";
  Days2[Days2["TUESDAY"] = 2] = "TUESDAY";
  Days2[Days2["WEDNESAY"] = 3] = "WEDNESAY";
  Days2[Days2["THURSDAY"] = 4] = "THURSDAY";
  Days2[Days2["FRIDAY"] = 5] = "FRIDAY";
  Days2[Days2["SATURDAY"] = 6] = "SATURDAY";
  return Days2;
})(Days || {});
var ConstantExpressions = /* @__PURE__ */ ((ConstantExpressions2) => {
  ConstantExpressions2["EVERY_SECOND"] = "* * * * * *";
  ConstantExpressions2["EVERY_5_SECONDS"] = "*/5 * * * * *";
  ConstantExpressions2["EVERY_10_SECONDS"] = "*/10 * * * * *";
  ConstantExpressions2["EVERY_30_SECONDS"] = "*/30 * * * * *";
  ConstantExpressions2["EVERY_MINUTE"] = "*/1 * * * *";
  ConstantExpressions2["EVERY_5_MINUTES"] = "0 */5 * * * *";
  ConstantExpressions2["EVERY_10_MINUTES"] = "0 */10 * * * *";
  ConstantExpressions2["EVERY_30_MINUTES"] = "0 */30 * * * *";
  ConstantExpressions2["EVERY_HOUR"] = "0 0-23/1 * * *";
  ConstantExpressions2["EVERY_2_HOURS"] = "0 0-23/2 * * *";
  ConstantExpressions2["EVERY_3_HOURS"] = "0 0-23/3 * * *";
  ConstantExpressions2["EVERY_4_HOURS"] = "0 0-23/4 * * *";
  ConstantExpressions2["EVERY_5_HOURS"] = "0 0-23/5 * * *";
  ConstantExpressions2["EVERY_6_HOURS"] = "0 0-23/6 * * *";
  ConstantExpressions2["EVERY_7_HOURS"] = "0 0-23/7 * * *";
  ConstantExpressions2["EVERY_8_HOURS"] = "0 0-23/8 * * *";
  ConstantExpressions2["EVERY_9_HOURS"] = "0 0-23/9 * * *";
  ConstantExpressions2["EVERY_10_HOURS"] = "0 0-23/10 * * *";
  ConstantExpressions2["EVERY_11_HOURS"] = "0 0-23/11 * * *";
  ConstantExpressions2["EVERY_12_HOURS"] = "0 0-23/12 * * *";
  ConstantExpressions2["EVERY_DAY_AT_1AM"] = "0 01 * * *";
  ConstantExpressions2["EVERY_DAY_AT_2AM"] = "0 02 * * *";
  ConstantExpressions2["EVERY_DAY_AT_3AM"] = "0 03 * * *";
  ConstantExpressions2["EVERY_DAY_AT_4AM"] = "0 04 * * *";
  ConstantExpressions2["EVERY_DAY_AT_5AM"] = "0 05 * * *";
  ConstantExpressions2["EVERY_DAY_AT_6AM"] = "0 06 * * *";
  ConstantExpressions2["EVERY_DAY_AT_7AM"] = "0 07 * * *";
  ConstantExpressions2["EVERY_DAY_AT_8AM"] = "0 08 * * *";
  ConstantExpressions2["EVERY_DAY_AT_9AM"] = "0 09 * * *";
  ConstantExpressions2["EVERY_DAY_AT_10AM"] = "0 10 * * *";
  ConstantExpressions2["EVERY_DAY_AT_11AM"] = "0 11 * * *";
  ConstantExpressions2["EVERY_DAY_AT_NOON"] = "0 12 * * *";
  ConstantExpressions2["EVERY_DAY_AT_1PM"] = "0 13 * * *";
  ConstantExpressions2["EVERY_DAY_AT_2PM"] = "0 14 * * *";
  ConstantExpressions2["EVERY_DAY_AT_3PM"] = "0 15 * * *";
  ConstantExpressions2["EVERY_DAY_AT_4PM"] = "0 16 * * *";
  ConstantExpressions2["EVERY_DAY_AT_5PM"] = "0 17 * * *";
  ConstantExpressions2["EVERY_DAY_AT_6PM"] = "0 18 * * *";
  ConstantExpressions2["EVERY_DAY_AT_7PM"] = "0 19 * * *";
  ConstantExpressions2["EVERY_DAY_AT_8PM"] = "0 20 * * *";
  ConstantExpressions2["EVERY_DAY_AT_9PM"] = "0 21 * * *";
  ConstantExpressions2["EVERY_DAY_AT_10PM"] = "0 22 * * *";
  ConstantExpressions2["EVERY_DAY_AT_11PM"] = "0 23 * * *";
  ConstantExpressions2["EVERY_DAY_AT_MIDNIGHT"] = "0 0 * * *";
  ConstantExpressions2["EVERY_WEEK"] = "0 0 * * 0";
  ConstantExpressions2["EVERY_WEEKDAY"] = "0 0 * * 1-5";
  ConstantExpressions2["EVERY_WEEKEND"] = "0 0 * * 6,0";
  ConstantExpressions2["EVERY_1ST_DAY_OF_MONTH_AT_MIDNIGHT"] = "0 0 1 * *";
  ConstantExpressions2["EVERY_1ST_DAY_OF_MONTH_AT_NOON"] = "0 12 1 * *";
  ConstantExpressions2["EVERY_2ND_HOUR"] = "0 */2 * * *";
  ConstantExpressions2["EVERY_2ND_HOUR_FROM_1AM_THROUGH_11PM"] = "0 1-23/2 * * *";
  ConstantExpressions2["EVERY_2ND_MONTH"] = "0 0 1 */2 *";
  ConstantExpressions2["EVERY_QUARTER"] = "0 0 1 */3 *";
  ConstantExpressions2["EVERY_6_MONTHS"] = "0 0 1 */6 *";
  ConstantExpressions2["EVERY_YEAR"] = "0 0 1 1 *";
  ConstantExpressions2["EVERY_30_MINUTES_BETWEEN_9AM_AND_5PM"] = "0 */30 9-17 * * *";
  ConstantExpressions2["EVERY_30_MINUTES_BETWEEN_9AM_AND_6PM"] = "0 */30 9-18 * * *";
  ConstantExpressions2["EVERY_30_MINUTES_BETWEEN_10AM_AND_7PM"] = "0 */30 10-19 * * *";
  return ConstantExpressions2;
})(ConstantExpressions || {});
var FunctionExpressions = {
  /**
   * Run the task every S seconds
   * @param {number} seconds
   */
  everySenconds(seconds = 1) {
    return `*/${seconds} * * * * *`;
  },
  /**
   * Run the task every M minutes
   * @param {number} minutes
   */
  everyMinutes(minutes = 1) {
    return `0 */${minutes} * * * *`;
  },
  /**
   * Run the task every H hours
   * @param {number} hours
   */
  everyHours(hours = 1) {
    return `0 0-23/${hours} * * *`;
  },
  /**
   * Run the task every H hours at M minutes
   * @param {number} hours
   * @param {number} minutes
   */
  everyHoursAt(hours, minutes = 0) {
    return `${minutes} 0-23/${hours} * * *`;
  },
  /**
   * Run the task every day at HH:MM
   * @param {string} [time='08:00'] - The time in 'HH:mm' format (24-hour clock).
   */
  everyDayAt(time = "00:00") {
    const [hours, minutes] = time.split(":");
    return `${minutes} ${hours} 0 * *`;
  },
  /**
   * Run the task at a specific time on a given day of the week.
   * @param {number} day - The day of the week (0 for Sunday, 1 for Monday, ..., 6 for Saturday).
   * @param {string} [time='14:00'] - The time in 'HH:mm' format (24-hour clock).
   */
  everyWeekOn(day, time = "00:00") {
    const [hours, minutes] = time.split(":");
    return `${minutes} ${hours} * * ${day}`;
  },
  /**
   * Run the task every day from monday to friday at given time
   * @param {string} [time='14:00'] - The time in 'HH:mm' format (24-hour clock).
   */
  everyWeekdayAt(time = "00:00") {
    const [hours, minutes] = time.split(":");
    return `${minutes} ${hours} * * 1-5`;
  },
  /**
   * Run the task on saturday and sunday at given time
   * @param {string} [time='14:00'] - The time in 'HH:mm' format (24-hour clock).
   */
  everyWeekendAt(time = "00:00") {
    const [hours, minutes] = time.split(":");
    return `${minutes} ${hours} * * 6,0`;
  },
  /**
   * Run the task every second
   * Alias: EVERY_SECOND
   */
  everySecond() {
    return "* * * * * *" /* EVERY_SECOND */;
  },
  /**
   * Run the task every minute
   * Alias: EVERY_MINUTE
   */
  everyMinute() {
    return "*/1 * * * *" /* EVERY_MINUTE */;
  },
  /**
   * Run the task every hour
   * Alias: EVERY_HOUR
   */
  hourly() {
    return "0 0-23/1 * * *" /* EVERY_HOUR */;
  },
  /**
   * Run the task every day at 00:00
   * Alias: EVERY_DAY_AT_MIDNIGHT
   */
  daily() {
    return "0 0 * * *" /* EVERY_DAY_AT_MIDNIGHT */;
  },
  /**
   * Run the task every day from monday to friday at 00:00
   * Alias: EVERY_WEEKDAY
   */
  everyWeekday() {
    return "0 0 * * 1-5" /* EVERY_WEEKDAY */;
  },
  /**
   * Run the task on saturday and sunday at 00:00
   * Alias: EVERY_WEEKDAY
   */
  everyWeekend() {
    return "0 0 * * 6,0" /* EVERY_WEEKEND */;
  },
  /**
   * Run the task every week on monday at 00:00
   * Alias: EVERY_WEEK
   */
  weekly() {
    return "0 0 * * 0" /* EVERY_WEEK */;
  },
  /**
   * Run the task every first day of month at 00:00
   * Alias: EVERY_1ST_DAY_OF_MONTH_AT_MIDNIGHT
   */
  monthly() {
    return "0 0 1 * *" /* EVERY_1ST_DAY_OF_MONTH_AT_MIDNIGHT */;
  },
  /**
   * Run the task every quarter (3 months)
   * Alias: EVERY_QUARTER
   */
  everyQuarter() {
    return "0 0 1 */3 *" /* EVERY_QUARTER */;
  },
  /**
   * Run the task on the first day of every year at 00:00
   * Alias: EVERY_1ST_DAY_OF_MONTH_AT_MIDNIGHT
   */
  yearly() {
    return "0 0 1 1 *" /* EVERY_YEAR */;
  }
};
var Patterns = {
  ...FunctionExpressions,
  ...Days,
  ...ConstantExpressions
};

// src/index.ts
var cron = ({
  pattern,
  name,
  run,
  ...options
}) => (app) => {
  if (!pattern) throw new Error("pattern is required");
  if (!name) throw new Error("name is required");
  return app.state((store) => {
    const prevCron = app.singleton.store?.cron ?? {};
    return {
      ...store,
      cron: {
        ...prevCron,
        [name]: new import_croner.Cron(
          pattern,
          options,
          () => (
            // @ts-expect-error private property
            run(app.singleton.store)
          )
        )
      }
    };
  });
};
var index_default = cron;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Patterns,
  cron
});
